
service: notes-api-tutorial
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage , 'dev'} #ako se navede stage, inace dev
  region: us-east-1
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:PutItem
  #     Resource: !GetAtt notesTable.Arn #hvata dole notesTable i njegov arn

plugins:
  - serverless-iam-roles-per-function

functions:
  authorizer: #ime lambde
    handler: authorizer.handler #authorizacija lambdi
    environment: 
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebclient

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable #dohvata ime tabele
      # AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 #koristi Keep-alive da koristi vec otvorene konekcije
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn 
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer #authorizacija lambdi

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable #dohvata ime tabele
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn 
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer #authorizacija lambdi

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable #dohvata ime tabele
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn 
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer #authorizacija lambdi
  
  # readNote:
  #   handler: handler.getAllNotes
  #   environment:
  #     NOTES_TABLE_NAME: !Ref notesTable #dohvata ime tabele
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Scan
  #       Resource: !GetAtt notesTable.Arn 
  #   events:
  #     - http:
  #         method: get
  #         path: notes
  #         authorizer: #authorizacija lambdi
  #           name: userpool_authorizer
  #           arn: ${ssm:/notes/${self:provider.stage}/userPoolArn}

resources:
  Resources:
    ${file(resources.yml)} #linkovanje drugog .yml